# chess
' created by Leonard Pauli, 7 sep 2020

Chess is TileGame

TileGame
	State
	Board is Board2DGrid
		start_provider
		col alpha-indexed from white bottom-left
			file
		row 1-indexes from white closest-to-home
			rank with Player

	Tile
		color
		position
			coding
		edges
	Edge
		(origin, target) is Tile
		type is Type
		Type
	Path
		is many Edge

	Piece
		Movement
			(vädersträck? n w e s? nw, etc?)
		coding
			ascii
			unicode
			title


	Action
		Movement
		Coding
			Format
				// PGN
			encode
			parse

	validate_action
	perform_action
	valid_actions_list with State + Player

	Turn

	score calculation?

	Player
		Home is (Tile, Tile) // sets direction
		Color
		pieces
			captured
			lost
			converted
		opponent is Player


wiki:
	2 player
	strategy board game
	checkerboard board 8x8 squares grid
	history
		millions players worldwide
		potentially derived from chaturanga (~<7th century, indian)
			xiangqi (east asian / "chinese chess") / janggi (korean) / shogi (japanese)
		europe ~9th century
		modern rules standardized ~19th century
	no hidden information
	start:
		16 pieces:
			king
				(n, w, e, s, nw, ne, sw, se)*1
				castling (a, h)-side
			queen
				(n, w, e, s, nw, ne, sw, se)*inf
			2*rook
				(n, w, e, s)*inf
			2*knight
				and(n, n, w) * (any rotation)
					any closest tile not on same rank, file or diagonal, ie. L-shape on normal board
					may "jump over" pieces
			2*bishop
				(nw, ne, sw, se)*inf
			8*pawn
				n*1
				n*2 if piece.prev_movements.count=0
				(nw, ne)*1 if can capture
				(nw, ne)*1 if opponent.pawn did n*2 prev_turn and opponent.pawn.file = piece.file
					aka "en passant"
				(convert to (Q, R, B, or K) of same color) on move to last rank (ie. required + during same turn)
					aka "promotion"
			-> no move allowed if putting own king in "check"
	objective: "checkmate" opponents king (inescapable threat of "capture")
		to that end: make pieces support each other + "capture" opponent pieces

		- check: opponent.next_turn.possible_moves -> king.capture
			player.current.possible_moves
				-> only such that check is prevented (+ not castling (as kings tile is already threatened))
				- if not possible, then check-mate
		- resignation // either player may resign
		- win on time // potential existed for player with time left to checkmate when opponent run out of time
		- forfeit
		- draw:
			- draw by agreement // player offer opponent, opponent agrees on his turn
			- stalemate // player has no legal moves and is not in check
			- threefold repetition // repeating board pattern, either player may claim a draw
			- fifty-move rule // no pawn moved + no capture made during last 50 moves, either player may claim a draw
			- dead position // neither player can checkmate with legal moves (eg. (king, knight), (king))
			- draw on time // out of time for both players


	exchanging pieces
		trade advantagous positions
	resign
	time-limit
		counted while players turn is active
	draw

	endgame
	variants
		fischer random chess aka chess960
			start_provider
				black mirrors white
				white.first_rank:
					bishops on opposite-colored tiles
					king in-between the rooks
					possibilities:
						4 * (dark, light)-tiled bishop,
						+ 6 remaining for queen
						+ 10 (2 knights on 5 squares)
						+ 3 tiles left: 1 way for 2 rooks + king as king has to be in-between
						-> 4*4*6*10*1
			castling:
				with (king, rook)
				prereq:
					- (king, rook).prev-movements.count = 0
					- king_path.{under attack}.count = 0;
						king_path: tile.path(king.tile, king.target.tile)
						rook_path: tile.path(rook.tile, rook.target.tile)
					- (king_path, rook_path).pieces.{not king or rook}.count = 0
				kinds:
					- a-side:
						notation: "0-0-0"
						king -> c
						a-side rook -> d
					- h-side:
						notation: "0-0"
						king -> g
						h-side rook -> f
				coding:
					portable game notation PGN
					starting position in FEN tag
					rule variant: [Variant "Fisherandom"] or [Variant "Chess960"]


		rules
		pieces
		chessboards
			hexagonal: https://en.wikipedia.org/wiki/File:Glinski_Chess_Setup.png
			circular: https://en.wikipedia.org/wiki/File:Rundskak_foto.jpg
			three-player: https://en.wikipedia.org/wiki/Three-player_chess


greater plan notes:

	// TODO: rewrite + in english
	Funderar på att bygga ut chess:et till ett nytt ActionChess:
	- action/realtime: not turn-based, man kan flytta piecer samtidigt
	- men för att behålla strategi-aspekten så tar piece:erna tar tid på sig
	- non-euclidian geometry: möjliggör för arbitrary boards / tile-sammansättningar (där tiles är straight hos spelaren, men kan warpa ut mot kanterna) (kräver att man gör sin egen renderare men low-level graphics apis, tänker WebGPU + vulkan, alt. plain CPU based initially)
	- arbitrary/infinite board size: (default levels + proceduriellt + muterbar (eg. av spelare potentiellt)) (där fog hindrar playern att se too far from its pieces)
	- detta möjliggör MASSIVE multiplayer online
	---
	Vore kul att publicera det sedan på ett sätt som möjliggör många små matcher, men även en persistant world
		där man kan börja bygga sitt emperium
	Tänker dock att när graphics-enginen blir lite bättre så kan man lägga till lite vackrare pieces och biom
	...och om man ändå har vackrare gubbar och biom, då kan man lika gärna lägga till lite actors (AI + story-based)
	och om man ändå har non-euclidan geometry, + arbitrary tile connections, då kan man väl lika gärna extenda det till 3D
	och lägga till lite fler pjäser, och då har man väl något dota2 liknande, blandat med stardew valley, blandat med minecraft, och lite chess, någon stans under ytan
	(om sedan renderingen + navigeringen är tillräckligt generell, så kan man säga att en tile är en bokstav, en piece är ens cursor, och tile-connections är bland annat hur cursorn kan gå... då har man plötsligt en text editor. Lägg till att varje tile kan ha "sub-tiles", då kan man plötsligt köra arabiska (rtl) i engelska (ltr) i latex (arbitrary layout) i en mindmap (cool layout) i ett fönster (app-layout) i en chess tile (that last part doesn't really make sense), så då kan jag rendera ett symboliskt programmeringsspråk med arbitrary nested embeds/sub-languages med ett uniformt navigerings interface; men det är en senare fråga)
